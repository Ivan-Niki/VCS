
============= Что такое Git =============
Git — распределённая система контроля версий, которая даёт возможность разработчикам отслеживать изменения в файлах и работать над одним проектом совместно с коллегами.
В распределённой системе налажена удалённая работа. Если с файлами основного репозитория что-то случится — проект легко восстановить из копии любого участника команды.
Она была разработана в 2005 году Линусом Торвальдсом, создателем Linux, чтобы другие разработчики могли вносить свой вклад в ядро Linux. 
Git известен своей скоростью, простым дизайном, поддержкой нелинейной разработки, полной децентрализацией и возможностью эффективно работать с большими проектами.
Подход Git к хранению данных похож на набор снимков миниатюрной файловой системы. 
Каждый раз, когда вы сохраняете состояние своего проекта в Git, система запоминает, как выглядит каждый файл в этот момент, и сохраняет ссылку на этот снимок.

В самом простом виде контроль версий — это сохранение на компьютере серии измененных файлов, например, 
с разными датами в названии, или режим отслеживания исправлений в текстовых документах.

Разработчикам часто бывает нужно вернуться к предыдущей версии кода:
- если оказывается, что решаемая задача больше не актуальна;
- если требуется внести исправления в более раннюю версию программы;
- если ошибка нашлась во время работы над новой задачей.

Если над проектом работает много людей, нужно, чтобы они могли вносить изменения в одни и те же файлы без конфликтов и потерь кода. 
Все эти задачи удобно решаются с помощью Git.

К базовым возможностям Git относятся:
- возврат к любой предыдущей версии кода;
- просмотр истории изменений;
- параллельная работа над проектом;
- backup кода.

----- Основные понятия Git -----
- Репозиторий: это хранилище, содержащее все файлы и историю изменений проекта.
- Коммит : фиксация изменений в репозитории с описанием внесенных изменений.
- Ветка (branch): отдельный поток разработки, который позволяет создавать и тестировать новые функции, не затрагивая основной код.
- Слияние (merge): объединение изменений из одной ветки в другую.


-------------- Что такое GitHub ---------------
GitHub — это облачная платформа для хостинга IT-проектов и совместной разработки, под капотом которой находится популярная система контроля версий Git, а также полноценная социальная сеть для разработчиков.
Многие путают Git и GitHub, но это не одно и то же: 
-> Git — это система (хранилище) контроля версий;
-> GitHub — это интернет-сервис (его еще называют социальной сетью для программистов), по сути использующийся
Git как удаленный Git-сервер, с которого можно получить все версии файлов проекта при удаленной разработке.

Кроме GitHub есть другие сервисы, которые используют Git, — например, Bitbucket и GitLab. 
Вы можете разместить Git-репозиторий на любом из них.


Краткая схема работы над проектом происходит так: 
- Разработчик создаёт новую ветку репозитория, работает в ней, после чего делает коммит и пушит.
- Создаёт пулл реквест (pull request).
- Ревьюер перепроверяет работу и её одобряет, после чего объединяет с основной веткой.


---- Как проверить, установелн ли git в вашей ОС? ----
В терминала необходимо ввести команду:   git --version

--- После установки Git необходимо настроить ИМЯ и EMAIL автора ---
-> git config --global user.name ИМЯ      --- ИЛИ ---     git config --global user.name "ИМЯ ФАМИЛИЯ"
-> git config --global user.email somename@gmail.com

--- Получение списка всез настроек Git ---
-> git config --list


-------------- ОБЛАСТИ GIT --------------
                                          git add                          git commit
[Working directory (рабочая директория)] --------> [Staging area (Индекс)]  -------->  [Repository (репозиторий)]
 

--- git status ---
Команда git status показывает состояния файлов в рабочей директории и индексе: 
- какие файлы изменены, но не добавлены в индекс; 
- какие ожидают коммита в индексе. 
Вдобавок к этому выводятся подсказки о том, как изменить состояние файлов.

--- git add ---
Команда git add добавляет содержимое рабочей директории в индекс (staging area) для последующего коммита. 
По умолчанию git commit использует лишь этот индекс, так что вы можете использовать git add для сборки слепка вашего следующего коммита.
Добавить отдельный файл в область подготовленных файлов можно параметром add с указанием имени файла.
-> Например:  git add somefile.js
Кроме того, можно добавить все файлы и папки в эту область, предоставив wildcard . вместо имени файла:
git add .


====================== РАБОТА С КОММИТАМИ ======================

--------- Внесение изменений (commit) однострочным сообщением или через редактор ---------
При создании коммита в репозитории можно добавить однострочное сообщение с помощью параметра commit с флагом -m.
Само сообщение вводится непосредственно после флага, в кавычках.
--> git commit -m "Your short summary about the commit"

Также можно открыть текстовый редактор в терминале для написания полного сообщения коммита. 
Оно может состоять из нескольких строк текста, в котором подробно характеризуются изменения, внесённые в репозиторий.
--> git commit



--------- Просмотр истории коммитов с изменениями ----------
Просматривать изменения, внесённые в репозиторий, можно с помощью параметра log. 
Он отображает список последних коммитов в порядке выполнения. 
Кроме того, добавив флаг -p, вы можете подробно изучить изменения, внесённые в каждый файл.
--> git log -p

--> git log   -> посмотреть историю коммитов;
--> git log --oneline   -> посмотреть историю коммитов (сокращённый вариант);
--> git log --oneline --graph (--decorate  --all)   -> посмотреть историю коммитов (сокращённый вариант) с графическим изображением.



--------- Просмотр заданного коммита ----------
Просмотреть полный список изменений, внесённых конкретным коммитом, можно с помощью параметра show, указав идентификатор или хеш коммита. 
Значение хеша уникально для каждого коммита, созданного в вашем репозитории. Например:
--> git show 1af17e73721dbe0c40011b82ed4bb1a7dbe3ce29

Также можно использовать сокращённый хеш:
--> git show 1af17e



--------- Просмотр изменений до коммита ----------
Можно просматривать список изменений, внесённых в репозиторий, используя параметр diff. 
По умолчанию отображаются только изменения, не подготовленные для фиксации.
--> git diff

Для просмотра подготовленных изменений необходимо добавить флаг --staged.
--> git diff --staged

Также можно указать имя файла как параметр и просмотреть изменения, внесённые только в этот файл.
--> git diff somefile.js





Чтобы удалить файлы из индекса вы можете использовать 2 команды: git reset и git restore.
-> git restore — восстановит файлы рабочего дерева.
-> git reset — сбрасывает текущий HEAD до указанного состояния.
По сути вы можете добиться одного и того же с помощью обеих команд.


У git reset есть три режима: --soft, --mixed и --hard. Я рассматриваю их как три стадии:

Стадия 1. git reset --soft --> обновление HEAD (обновление коммитов в истории репозитория).
Стадия 2. git reset --mixed --> обновление индекса (staging area).   (--mixed используется по умолчанию).
Стадия 3. git reset --hard --> обновление рабочей директории.

1) git reset --soft HEAD~ -> удалить последний коммит из истории, НО НЕ удалять изменения, связанные с этим коммитом, из staging area и working directory;
git reset --soft HEAD~4 -> удалить 4 последних коммита из истории, НО НЕ удалять изменения, связанные с этими коммитами, из staging area и working directory;

2) git reset HEAD~  или  git reset --mixed HEAD~  -> удалить последний коммит из истории, также удалить изменения, связанные с этим коммитом, из staging area, НО НЕ удалять изменения из working directory;

3) git reset --hard HEAD~ -> удалить последний коммит из истории и удалить изменения из staging area и working directory;
git reset --hard HEAD~2 -> удалить 2 последних коммита из истории и удалить изменения, связанные с этими коммитами, из staging area и working directory;


Чтобы удалить из индекса некоторые файлы используйте следующую команду:
git restore --staged <file>  - данная команда удалит из staging area отслеживаемые изменения в файле.





